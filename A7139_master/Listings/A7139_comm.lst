C51 COMPILER V9.54   A7139_COMM                                                            03/08/2017 16:52:07 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE A7139_COMM
OBJECT MODULE PLACED IN .\output\A7139_comm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source\USER\A7139\A7139_comm.c LARGE OPTIMIZE(0,SPEED) BROWSE MODC2 INCD
                    -IR(.\source\USER\A7139;.\source\USER\timer;.\source\USER\uart;.\source\USER\led;C:\Keil_v5\C51\INC\SONIX;.\source\USER\c
                    -lock;.\source\USER\inc;.\source\USER\rtimer;.\source\USER\cmd) DEBUG OBJECTEXTEND PRINT(.\Listings\A7139_comm.lst) TABS(
                    -2) OBJECT(.\output\A7139_comm.obj)

line level    source

   1          #include "A7139_comm.h"
   2          #include "A7139.h"
   3          #include "SN8F5708.h"
   4          #include "uart.h"
   5          #include "led.h"
   6          #include "cmd.h"
   7          
   8          uint8_t idata rf_state_a7139 = RF_STATE_A7139_IDLE;
   9          uint8_t idata a7139_irq_status = 0;
  10          
  11          uint16_t idata crc_check_code = 0;
  12          uint8_t idata crc_check_code_l = 0;
  13          uint8_t idata crc_check_code_h = 0;
  14          
  15          extern uint8_t idata timer0_flag;
  16          extern uint8_t idata timer1_flag;
  17          uint8_t idata bufSend[]=  {"A7139"};
  18          uint8_t idata bufRecv[RF_RECV_BUF_LEN_MAX]={0};
  19          
  20          uint8_t idata string_test[] = {"hellow !"};
  21          uint8_t idata i = 0;
  22          
  23          extern uint8_t idata UartRxFlag;
  24          extern uint8_t idata RxBuf[RF_RECV_BUF_LEN_MAX];
  25          uint8_t xdata a7139_tx[RF_RECV_BUF_LEN_MAX]={0};
  26          
  27          extern uint8_t xdata per_second_flag;
  28          extern xdata uint8_t rf_tx_valid_flag;
  29          
  30          //定义二维数组，存放向各节点要发送的数据，注意第3字节为节点地址，节点接收到数据后需比对节点地址
  31          // uint8_t xdata slave_cmd[10][RF_RECV_BUF_LEN_MAX] = {{0xaa,0xbb,0x0a,0x00,0x00,0xfe,0x38},
  32          //                             {0xaa,0xbb,0x02,0x00,0x00,0x3c,0xb9},
  33          //                             {0xaa,0xbb,0x03,0x00,0x00,0xfc,0xe8},
  34          //                             {0xaa,0xbb,0x04,0x00,0x00,0x3d,0x59},
  35          //                             {0xaa,0xbb,0x05,0x00,0x00,0xfd,0x08},
  36          //                             {0xaa,0xbb,0x06,0x00,0x00,0xfd,0xf8},
  37          //                             {0xaa,0xbb,0x07,0x00,0x00,0x3d,0xa9},
  38          //                             {0xaa,0xbb,0x08,0x00,0x00,0x3e,0x99},
  39          //                             {0xaa,0xbb,0x09,0x00,0x00,0xfe,0xc8},
  40          //                             {0xaa,0xbb,0x0a,0x00,0x00,0xfe,0x38}};
  41           
  42                                       
  43          //INT1 interrupt function
  44          void INT1Interrupt(void) interrupt ISRInt1 //
  45          { //IE0 clear by hardware
  46   1        a7139_irq_status = 1; 
  47   1      }
  48          
  49          //a7139 transmit a packet
  50          void a7139_tx_packet(uint8_t *s,uint8_t n)
  51          {
  52   1          A7139_StrobeCmd(CMD_STBY);
C51 COMPILER V9.54   A7139_COMM                                                            03/08/2017 16:52:07 PAGE 2   

  53   1          delay_ms(10);
  54   1          //send a tx packet
  55   1      //    A7139_WriteFIFO(s,7);
  56   1          A7139_WriteFIFO(s,n);
  57   1          A7139_StrobeCmd(CMD_TX);
  58   1          delay_ms(10);//For some perform faster MCU, need time to wait at least more than 10 millisecond
  59   1          rf_state_a7139 =  RF_STATE_A7139_TX;
  60   1      }
  61          
  62          int a7139_master()
  63          {
  64   1          int ret = TRUE;
  65   1          int i = 0;
  66   1        
  67   1          //send a tx packet per 100ms
  68   1      //     if(per_second_flag == 1)
  69   1      //     {
  70   1      //       per_second_flag = 0;
  71   1      //         
  72   1      //       if(i < 10)
  73   1      //       {
  74   1      //          a7139_tx_packet(slave_cmd[i],RF_RECV_BUF_LEN_MAX);
  75   1      //          i++;
  76   1      //       }
  77   1      //       else
  78   1      //       {
  79   1      //          i = 0;
  80   1      //       }
  81   1      //     }
  82   1           //A7139 interrupt
  83   1           if(a7139_irq_status == 1)
  84   1           {
  85   2            switch(rf_state_a7139)
  86   2            {
  87   3              case RF_STATE_A7139_IDLE:
  88   3                A7139_ReadFIFO(bufRecv,sizeof(bufSend));
  89   3                A7139_StrobeCmd(CMD_RX);
  90   3                rf_state_a7139 = RF_STATE_A7139_RX;
  91   3                break;
  92   3              case RF_STATE_A7139_RX:
  93   3                A7139_ReadFIFO(bufRecv,sizeof(bufRecv));
  94   3                A7139_StrobeCmd(CMD_RX);                
  95   3              
  96   3                crc_check_code = Get_CRC_Check_Code(bufRecv,sizeof(bufRecv)-2);
  97   3                crc_check_code_l = 0xff & crc_check_code;
  98   3                crc_check_code_h = 0xff & (crc_check_code>>8);
  99   3                if((crc_check_code_h == bufRecv[5])&&(crc_check_code_l == bufRecv[6]))  //CRC 校验,高字节在前
 100   3                {
 101   4                  if(bufRecv[2] == 0x0a)//节点地址
 102   4                  {
 103   5                    uart_send_string(bufRecv,sizeof(bufRecv));//debug 
 104   5                    toggle_led_red;
 105   5                  }
 106   4                }
 107   3                break;
 108   3              case RF_STATE_A7139_TX:
 109   3                //tx completed
 110   3                toggle_led_blue;//debug     
 111   3                A7139_StrobeCmd(CMD_RX); //enter RX 
 112   3                delay_ms(10);//For some perform faster MCU, need time to wait at least more than 10 millisecond
 113   3                rf_state_a7139 = RF_STATE_A7139_RX;       
 114   3                break;
C51 COMPILER V9.54   A7139_COMM                                                            03/08/2017 16:52:07 PAGE 3   

 115   3            }
 116   2      
 117   2            a7139_irq_status = 0;
 118   2           }
 119   1           //uart received a packet
 120   1           if(rf_tx_valid_flag == 1)
 121   1           {
 122   2             a7139_tx_packet(a7139_tx,RF_RECV_BUF_LEN_MAX);
 123   2             
 124   2             rf_tx_valid_flag = 0;
 125   2           }
 126   1         return ret;
 127   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    327    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     15    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     29    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
