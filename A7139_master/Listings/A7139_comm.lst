C51 COMPILER V9.54   A7139_COMM                                                            03/24/2017 11:31:15 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE A7139_COMM
OBJECT MODULE PLACED IN .\output\A7139_comm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source\USER\A7139\A7139_comm.c LARGE OPTIMIZE(8,SPEED) BROWSE MODC2 INCD
                    -IR(.\source\USER\A7139;.\source\USER\timer;.\source\USER\uart;.\source\USER\led;C:\Keil_v5\C51\INC\SONIX;.\source\USER\c
                    -lock;.\source\USER\inc;.\source\USER\rtimer;.\source\USER\cmd;.\source\USER\aodv) DEFINE(NODE_ADDR=3) DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\A7139_comm.lst) TABS(2) OBJECT(.\output\A7139_comm.obj)

line level    source

   1          #include "A7139_comm.h"
   2          #include "A7139.h"
   3          #include "SN8F5708.h"
   4          #include "uart.h"
   5          #include "led.h"
   6          #include "cmd.h"
   7          #include "AODV.h"
   8          
   9          uint8_t xdata rf_state_a7139 = RF_STATE_A7139_IDLE;
  10          uint8_t xdata a7139_irq_status = 0;
  11          
  12          
  13          
  14          uint8_t xdata bufSend[]=  {"A7139"};
  15          uint8_t xdata bufRecv[RF_RECV_BUF_LEN_MAX]={0};
  16          
  17          
  18          extern uint8_t xdata RxBuf[RF_RECV_BUF_LEN_MAX];
  19          uint8_t xdata a7139_tx[RF_RECV_BUF_LEN_MAX]={0};
  20          
  21          extern xdata uint8_t rf_tx_valid_flag;
  22          
  23          xdata uint8_t rf_retx_valid_flag = 0;
  24          
  25          #define BLACK_LIST_LEN  (3)
  26          uint16_t xdata black_list_buf[BLACK_LIST_LEN]={1,4,5};
  27          extern uint8_t route_success_flag;
  28          extern ROUTE_LIST route_list_buf[ROUTE_LIST_BUF_LEN_MAX];
  29                                       
  30          //INT1 interrupt function
  31          void INT1Interrupt(void) interrupt ISRInt1 //
  32          { //IE0 clear by hardware
  33   1        a7139_irq_status = 1; 
  34   1      }
  35          
  36          //a7139 transmit a packet
  37          void a7139_tx_packet(uint8_t *s,uint8_t n)
  38          {
  39   1          A7139_StrobeCmd(CMD_STBY);
  40   1          clock_delay_ms(10);
  41   1          //send a tx packet
  42   1      //    A7139_WriteFIFO(s,7);
  43   1          A7139_WriteFIFO(s,n);
  44   1          A7139_StrobeCmd(CMD_TX);
  45   1          clock_delay_ms(10);//For some perform faster MCU, need time to wait at least more than 10 millisecond
  46   1          rf_state_a7139 =  RF_STATE_A7139_TX;
  47   1      }
  48          uint8_t chkSumCalc( const uint8_t * pData, uint8_t len )
  49          {
  50   1          uint8_t chksum = 0;
  51   1          uint8_t i = 0;
  52   1      
C51 COMPILER V9.54   A7139_COMM                                                            03/24/2017 11:31:15 PAGE 2   

  53   1          for( i = 0; i < len; i++ )
  54   1          {
  55   2              chksum += pData[i];
  56   2          }
  57   1      
  58   1          chksum = ~chksum + 1;
  59   1          return chksum;
  60   1      }
  61          
  62          uint8_t in_black_list(uint16_t from_addr)
  63          {
  64   1        int i = 0;
  65   1        
  66   1        while(i<BLACK_LIST_LEN)
  67   1        {
  68   2          if(black_list_buf[i] == from_addr)
  69   2            break;
  70   2          i++;
  71   2        }
  72   1        if(i<BLACK_LIST_LEN)
  73   1          return 1;
  74   1        else
  75   1          return 0;
  76   1      }
  77          
  78          int a7139_master()
  79          {
  80   1          int ret = TRUE;
  81   1          uint8_t rx_tmp = 0;
  82   1      
  83   1           //A7139 interrupt
  84   1           if(a7139_irq_status == 1)
  85   1           {
  86   2            switch(rf_state_a7139)
  87   2            {
  88   3              case RF_STATE_A7139_IDLE:
  89   3                A7139_ReadFIFO(bufRecv,sizeof(bufSend));
  90   3                A7139_StrobeCmd(CMD_RX);
  91   3                rf_state_a7139 = RF_STATE_A7139_RX;
  92   3                break;
  93   3              case RF_STATE_A7139_RX:
  94   3                A7139_ReadFIFO(bufRecv,sizeof(bufRecv));
  95   3                A7139_StrobeCmd(CMD_RX);
  96   3              
  97   3                if(!in_black_list((bufRecv[2]<<8)+bufRecv[3]))
  98   3                {
  99   4                  switch(bufRecv[0])
 100   4                  { 
 101   5                    case AODV_RREQ_TYPE:
 102   5                      recv_rreq_process((RREQ *)bufRecv);
 103   5                      break;
 104   5                    case AODV_RREP_TYPE:
 105   5                        if(NODE_ADDR == ((bufRecv[4]<<8)+bufRecv[5]))
 106   5                          recv_rrep_process((RREP *)bufRecv);
 107   5                      break;
 108   5                    case AODV_DATA_TYPE:
 109   5                        if(NODE_ADDR == ((bufRecv[4]<<8)+bufRecv[5]))
 110   5                          recv_aodv_data_process((AODV_DATA *)bufRecv);
 111   5                      break;
 112   5                  }
 113   4                }
 114   3                
C51 COMPILER V9.54   A7139_COMM                                                            03/24/2017 11:31:15 PAGE 3   

 115   3                break;
 116   3              case RF_STATE_A7139_TX:
 117   3                //tx completed
 118   3                blink_led_blue;//debug      
 119   3                A7139_StrobeCmd(CMD_RX); //enter RX 
 120   3                clock_delay_ms(10);//For some perform faster MCU, need time to wait at least more than 10 millisecond
 121   3                rf_state_a7139 = RF_STATE_A7139_RX;       
 122   3                break;
 123   3            }
 124   2      
 125   2            a7139_irq_status = 0;
 126   2           }
 127   1           if(rf_retx_valid_flag)
 128   1          {
 129   2            clock_delay_ms(1000);
 130   2            a7139_tx_packet(bufRecv,bufRecv[1]+3);
 131   2            rf_retx_valid_flag = 0;
 132   2          }
 133   1           
 134   1           //uart received a packet
 135   1           if(rf_tx_valid_flag == 1)
 136   1           {
 137   2             //a7139_tx_packet(a7139_tx,a7139_tx[1]+3);
 138   2             aodv_data_tx(&a7139_tx[4], a7139_tx[1]-2, a7139_tx[2]);
 139   2             rf_tx_valid_flag = 0;
 140   2           }
 141   1           if(route_success_flag)
 142   1           {
 143   2             uint8_t result;
 144   2             AODV_DATA p;
 145   2             
 146   2             result = search_in_routelist(a7139_tx[2]);
 147   2             aodv_data_pkg(&a7139_tx[4], a7139_tx[1]-2, a7139_tx[2], &p);
 148   2             aodv_data_send(&p, route_list_buf[result].nexthop_addr);
 149   2             uart_send_string1(&p, p.len+AODV_DATA_BUF_LEN_BASE);
*** WARNING C182 IN LINE 149 OF source\USER\A7139\A7139_comm.c: pointer to different objects
 150   2             route_success_flag = 0;
 151   2           }
 152   1         return ret;
 153   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    612    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     95      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
