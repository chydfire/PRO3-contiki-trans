C51 COMPILER V9.54   A7139_SPI                                                             03/10/2017 11:11:23 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE A7139_SPI
OBJECT MODULE PLACED IN .\output\A7139_spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source\USER\A7139\A7139_spi.c LARGE OPTIMIZE(8,SPEED) BROWSE MODC2 INCDI
                    -R(.\source\USER\A7139;.\source\USER\timer;.\source\USER\uart;.\source\USER\led;C:\Keil_v5\C51\INC\SONIX;.\source\USER\cl
                    -ock;.\source\USER\inc;.\source\USER\rtimer;.\source\USER\cmd) DEBUG OBJECTEXTEND PRINT(.\Listings\A7139_spi.lst) TABS(2)
                    - OBJECT(.\output\A7139_spi.obj)

line level    source

   1          
   2          #include "A7139_spi.h"
   3          #include "clock.h"
   4          
   5          
   6          //A7139引脚配置：
   7          //SCS->P2.0, SCK->P1.7, GPIO2->P2.2/INT1, GPIO1->P2.1/INT0, SDIO->P1.6, CKO->P1.5(GPIO2就是IRQ引脚) 
   8           
   9           //a7139中断管脚配置:GPIO2->P2.2/INT1
  10          void init_irq_a7139()
  11          {
  12   1        P2M  &= 0xFB;   //P2.2 input mode
  13   1      //  P2UR |= 0x04;   //enable P2.2 pull-up resister
  14   1        P2UR &= 0xFB;   //disable P2.2 pull-up resister
  15   1      
  16   1        PEDGE = 0x08;   //INT1 trigger is falling edge
  17   1        IEN0 |= 0x84;   //enable INT1;enable all interrupt 
  18   1      }
  19          //SCS->P2.0, SCK->P1.7, GPIO2->P2.2/INT1, GPIO1->P2.1/INT0, SDIO->P1.6, CKO->P1.5
  20          void init_spi_a7139(void)
  21          {
  22   1      
  23   1        //GPIO2->P2.2/INT1  pull-up input
  24   1        P2M  &= 0xFB;       //P2.2 input mode
  25   1        P2UR |= 0x04;       //enable P2.2 pull-up resister
  26   1        //GPIO1->P2.1/INT0  pull-up input
  27   1        P2M  &= 0xFD;       //P2.1 input mode
  28   1        P2UR |= 0x02;       //enable P2.1 pull-up resister
  29   1        
  30   1        //SCS->P2.0, SCK->P1.7 push-pull output
  31   1        P2M  |= 0x01;       //P2.0 output mode
  32   1        P2UR &= 0xFE;       //disable P2.0 pull-up resister
  33   1      
  34   1        
  35   1        P1M  |= 0x80;       //P1.7 output mode
  36   1        P1UR &= 0x7F;       //disable P1.7 pull-up resister
  37   1        P1OC &= 0x7E;       //disable open drain
  38   1        
  39   1        //SDIO->P1.6  push-pull by default(two-way)
  40   1        P1M  |= 0x40;       //P1.6 output mode
  41   1        P1UR &= 0xBF;       //disable P1.6 pull-up resister
  42   1      
  43   1        
  44   1        //CKO->P1.5 floating input
  45   1        P1M  &= 0xDF;       //P1.5 input mode
  46   1        P1UR &= 0xDF;       //disable P1.6 pull-up resister
  47   1        
  48   1        init_irq_a7139();
  49   1        
  50   1        cs_high_a7139();
  51   1      }
  52          
C51 COMPILER V9.54   A7139_SPI                                                             03/10/2017 11:11:23 PAGE 2   

  53          //a7139 chip select
  54          void cs_low_a7139(void)
  55          {
  56   1        P20 = 0;
  57   1      }
  58          void cs_high_a7139(void)
  59          {
  60   1        P20 = 1;
  61   1      }
  62          
  63          
  64          //SCS->P2.0, SCK->P1.7, GPIO2->P2.2/INT1, GPIO1->P2.1/INT0, SDIO->P1.6, CKO->P1.5(GPIO2就是IRQ引脚) 
  65          void SIO_Mode(uint8_t mod)
  66          {
  67   1        if(mod == INPUT)
  68   1        {
  69   2          P1M  &= 0xBF;       //SIO pull-up input or floating input
  70   2          P1UR |= 0x40;       //enable P1.6 pull-up resister
  71   2      //    P1UR &= 0xBF; //disable P1.6 pull-up resister
  72   2        }
  73   1        else
  74   1        {
  75   2          //SIO push-pull output
  76   2          P1M  |= 0x40;       //P1.6 output mode
  77   2          P1UR &= 0xBF;       //disable P1.6 pull-up resister
  78   2          P1OC &= 0xBE;       //disable open drain
  79   2        }
  80   1      }
  81          
  82          void SPIx_WriteByte(uint8_t dat)
  83          {
  84   1          uint8_t i;
  85   1          for(i=0; i<8; i++)
  86   1          {
  87   2              if(dat & 0x80)
  88   2                  SIO_OUT(HIGH);
  89   2              else
  90   2                  SIO_OUT(LOW);
  91   2              clock_delay_us(1);
  92   2              SCK_OUT(HIGH);
  93   2              clock_delay_us(1);
  94   2              SCK_OUT(LOW);
  95   2              dat<<=1;
  96   2          }
  97   1      }
  98          
  99          void SPIx_WriteWord(uint16_t wrd)
 100          {
 101   1          uint8_t i;
 102   1          for(i=0; i<16; i++)
 103   1          {
 104   2              if(wrd & 0x8000)
 105   2                  SIO_OUT(HIGH);
 106   2              else
 107   2                  SIO_OUT(LOW);
 108   2              SCK_OUT(HIGH);
 109   2              clock_delay_us(1);
 110   2              SCK_OUT(LOW);
 111   2              wrd<<=1;
 112   2          }
 113   1      }
 114          
C51 COMPILER V9.54   A7139_SPI                                                             03/10/2017 11:11:23 PAGE 3   

 115          uint8_t SPIx_ReadByte(void)
 116          {
 117   1        uint8_t i,tmp=0;
 118   1        SIO_Mode(INPUT);
 119   1        for(i=0; i<8; i++)
 120   1        {
 121   2              if(SIO_IN())
 122   2                  tmp = (tmp << 1) | 0x01;
 123   2              else
 124   2                  tmp = tmp << 1;
 125   2              SCK_OUT(HIGH);
 126   2              clock_delay_us(1);
 127   2              SCK_OUT(LOW);
 128   2           }
 129   1        SIO_Mode(OUTPUT);
 130   1        return tmp;
 131   1      }
 132          
 133          uint16_t SPIx_ReadWord(void)
 134          {
 135   1        uint8_t  i;
 136   1        uint16_t tmp=0;
 137   1        SIO_Mode(INPUT);  
 138   1        for(i=0; i<16; i++)
 139   1        {
 140   2              if(SIO_IN())
 141   2                  tmp = (tmp << 1) | 0x01;
 142   2              else
 143   2                  tmp = tmp << 1;
 144   2              SCK_OUT(HIGH);
 145   2              clock_delay_us(1);
 146   2              SCK_OUT(LOW);
 147   2          }
 148   1        SIO_Mode(OUTPUT);    
 149   1          return tmp;
 150   1      }
 151          
 152          
 153          
 154          
 155          
 156          
 157          
 158          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    358    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
