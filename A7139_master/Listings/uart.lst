C51 COMPILER V9.54   UART                                                                  03/10/2017 11:11:23 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\output\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source\USER\uart\uart.c LARGE OPTIMIZE(8,SPEED) BROWSE MODC2 INCDIR(.\so
                    -urce\USER\A7139;.\source\USER\timer;.\source\USER\uart;.\source\USER\led;C:\Keil_v5\C51\INC\SONIX;.\source\USER\clock;.\
                    -source\USER\inc;.\source\USER\rtimer;.\source\USER\cmd) DEBUG OBJECTEXTEND PRINT(.\Listings\uart.lst) TABS(2) OBJECT(.\o
                    -utput\uart.obj)

line level    source

   1          
   2          #include "uart.h"
   3          
   4          xdata uint8_t RxBuf[UART_BUF_LEN_MAX] = {0};
   5          xdata uint8_t recv_head=0;
   6          xdata uint8_t recv_tail=0;
   7          
   8          //uart init
   9          void uart_init(void)
  10          {
  11   1        P05  = 1;     //UTX pin set high
  12   1        P0M |= 0x20;  //UTX is output,URX is input
  13   1        
  14   1        SM0 = 0;
  15   1        SM1 = 1;      //mode 1:8-bit uart
  16   1        REN0 = 1;     //uart reception enable
  17   1        
  18   1        switch (Baudrate) 
  19   1        {
  20   2              case BR_9600:
  21   2                  S0RELH = 0x03;
  22   2                  S0RELL = 0x98;      // for baudrate gen
  23   2      
  24   2                  PCON |= 0x80;       // SMOD = 1;    
  25   2                                      // baudrate : 9615
  26   2                  BD = 1;
  27   2                  break;
  28   2              case BR_19200:
  29   2                  S0RELH = 0x03;
  30   2                  S0RELL = 0xCC;      // for baudrate gen
  31   2      
  32   2                  PCON |= 0x80;       // SMOD = 1;    
  33   2                                      // baudrate : 19230
  34   2                  BD = 1;
  35   2                  break;
  36   2              case BR_38400:
  37   2                  S0RELH = 0x03;
  38   2                  S0RELL = 0xE6;      // for baudrate gen
  39   2      
  40   2                  PCON |= 0x80;       // SMOD = 1;    
  41   2                                      // baudrate : 38461
  42   2                  BD = 1;
  43   2                  break;
  44   2              case BR_57600:
  45   2                  S0RELH = 0x03;
  46   2                  S0RELL = 0xEF;      // for baudrate gen
  47   2      
  48   2                  PCON |= 0x80;       // SMOD = 1;    
  49   2                                      // baudrate : 58823
  50   2                  BD = 1;
  51   2                  break;
  52   2              case BR_115200:
C51 COMPILER V9.54   UART                                                                  03/10/2017 11:11:23 PAGE 2   

  53   2                  S0RELH = 0x03;
  54   2                  S0RELL = 0xF7;      // for baudrate gen
  55   2      
  56   2                  PCON |= 0x80;       // SMOD = 1;    
  57   2                                      // baudrate : 111111
  58   2                  BD = 1;
  59   2                  break;
  60   2              default:
  61   2                  // br_9600
  62   2                  S0RELH = 0x03;
  63   2                  S0RELL = 0x98;      // for baudrate gen
  64   2      
  65   2                  PCON |= 0x80;       // SMOD = 1;    
  66   2                                      // baudrate : 9615
  67   2                  BD = 1;
  68   2                  break;
  69   2        }
  70   1        
  71   1        ES0 = 1;   //enable uart interrupt
  72   1        EAL = 1;   //enable golbal interrupt
  73   1      }
  74          
  75          //uart interrupt function
  76          /*************************************************************************************
  77          uart接收命令帧格式（下行）
  78          起始字节 + 同步字节 + 节点地址 + 数据区（2个字节） + CRC校验码高字节 + CRC校验码低字节
  79          0xaa        0xbb      (1 -100)
  80          **************************************************************************************/
  81          void SYSUartInterrupt(void) interrupt ISRUart  // Vector @  0x23
  82          {
  83   1          if(RI0)
  84   1          {
  85   2              register uint8_t next = 0;
  86   2            
  87   2              RI0 = 0;                // Clear receiver flag
  88   2              RB80 = 0;
  89   2      
  90   2              next = (recv_head + 1) % UART_BUF_LEN_MAX;
  91   2              if( next != recv_tail )
  92   2              {
  93   3                  RxBuf[recv_head] = S0BUF;
  94   3                  recv_head = next;
  95   3              }
  96   2          }
  97   1      }
  98          
  99          //UART send one byte function
 100          void uart_send_byte(unsigned char txData)
 101          {
 102   1          S0BUF = txData;
 103   1      
 104   1          while(!TI0);       // wait for end of transmit
 105   1      
 106   1          if (TI0) 
 107   1          {
 108   2              TI0 = 0;
 109   2          }
 110   1      }
 111          
 112          //UART send one byte function
 113          void uart_send_byte1(uint8_t txData)
 114          {
C51 COMPILER V9.54   UART                                                                  03/10/2017 11:11:23 PAGE 3   

 115   1          S0BUF = txData;
 116   1      
 117   1          while(!TI0);       // wait for end of transmit
 118   1      
 119   1          if (TI0) 
 120   1          {
 121   2              TI0 = 0;
 122   2          }
 123   1      }
 124          
 125          //UART send string function
 126          void uart_send_string1(uint8_t *s,unsigned char n)
 127          {
 128   1         unsigned char i = 0;
 129   1         for(i=0;i<n;i++)
 130   1         {
 131   2          uart_send_byte1(s[i]);
 132   2         }
 133   1      }
 134          
 135          
 136          //unsigned int Get_CRC_Check_Code(unsigned char *s,unsigned int n)
 137          //{
 138          // unsigned char idata i,j;
 139          // unsigned int  idata CRC_Code = 0xFFFF;
 140          // for(i=0;i<n;i++)
 141          // {
 142          //     CRC_Code ^= s[i];
 143          //     for(j=0;j<8;j++)
 144          //     {
 145          //        if(CRC_Code&1)
 146          //        {
 147          //         CRC_Code >>= 1;
 148          //         CRC_Code ^= 0xA001;
 149          //        }
 150          //        else
 151          //        {
 152          //         CRC_Code >>= 1;
 153          //        }
 154          //     }
 155          // }
 156          // return CRC_Code;
 157          //}
 158          
 159          
 160          void
 161          uart_writeb(char byte)
 162          {
 163   1          S0BUF = byte;
 164   1      
 165   1          while(!TI0);       // wait for end of transmit
 166   1      
 167   1          if (TI0) 
 168   1          {
 169   2              TI0 = 0;
 170   2          }
 171   1      }
 172          
 173          char
 174          putchar(char c)
 175          {
 176   1        uart_writeb((char) c);
C51 COMPILER V9.54   UART                                                                  03/10/2017 11:11:23 PAGE 4   

 177   1        return c;
 178   1      }
 179          
 180          
 181          uint8_t uart_getchar(void)
 182          {
 183   1        register uint8_t p = 0;
 184   1        
 185   1        if(recv_tail != recv_head)
 186   1        {
 187   2            p = RxBuf[recv_tail];
 188   2            recv_tail = (recv_tail + 1) % UART_BUF_LEN_MAX;
 189   2        }
 190   1        
 191   1        return p;
 192   1      }
 193          
 194          uint8_t avalible(void)
 195          {
 196   1        uint8_t cnt = 0;
 197   1        
 198   1        if(recv_tail < recv_head)
 199   1        {
 200   2           cnt = recv_head - recv_tail;
 201   2        }
 202   1        else if(recv_tail > recv_head)
 203   1        {
 204   2           cnt = UART_BUF_LEN_MAX - recv_tail + recv_head;
 205   2        }
 206   1        
 207   1        return cnt;
 208   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    337    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     34       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
