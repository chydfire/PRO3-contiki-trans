C51 COMPILER V9.54   CMD                                                                   03/24/2017 11:31:15 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE CMD
OBJECT MODULE PLACED IN .\output\cmd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source\USER\cmd\cmd.c LARGE OPTIMIZE(8,SPEED) BROWSE MODC2 INCDIR(.\sour
                    -ce\USER\A7139;.\source\USER\timer;.\source\USER\uart;.\source\USER\led;C:\Keil_v5\C51\INC\SONIX;.\source\USER\clock;.\so
                    -urce\USER\inc;.\source\USER\rtimer;.\source\USER\cmd;.\source\USER\aodv) DEFINE(NODE_ADDR=3) DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\cmd.lst) TABS(2) OBJECT(.\output\cmd.obj)

line level    source

   1          #include "cmd.h"
   2          #include "uart.h"
   3          #include "clock.h"
   4          #include "A7139_comm.h"
   5          #include <ctype.h>
   6          #include <string.h>
   7          
   8          xdata uint8_t rf_tx_valid_flag = 0; 
   9          
  10          /* Display prompt string */
  11          code char *PROMPT =
  12             "\n#> "
  13             ;
  14          /* Copyright string */
  15          code char *COPYRIGHT =
  16           "\n"
  17           "SARI51 Copyright 2012-22"
  18             ;
  19          /* Local constants */
  20          code char *intro=
  21           "\n"
  22          // " SARI51 Command Line Interface"
  23           "SARI51 CLI"
  24             ;
  25          code char *help = 
  26           "\n"
  27               "+==== Command ===+= Function =============+\n"
  28          //   "|INFO            | Display system info    |\n"
  29          //   "|HELP or ?       | Display this help      |\n"
  30          //   "|----------------+------------------------|\n"
  31          //   "|LED [n] [op]    | Turn on/off led        |\n"
  32               "|TRAC            | Tracing Adjust Radio   |\n"
  33          //   "|XRAM [addr] <va>| Read/Write XRAM        |\n"
  34          //   "|REG  [reg] <va> | Read/Write SPI Register|\n"
  35               "|FREQ <va>       | Get/Set Frequency      |\n"
  36               "|COLC <va>       | Get/Set COLC           |\n"
  37               "|DIFF <va>       | Get/Set DesiredOffset  |\n"
  38               "|RATE <va>       | Get/Set RF Baudrate    |\n"
  39               "|TXPW <va>       | Get/Set RF TX Power    |\n"
  40          //   "|SEND            | Wireless Send Frame    |\n"
  41          //   "|RECV            | Wireless Receive Frame |\n"
  42               "|LOAD            | Read Flash Settings    |\n"
  43               "|SAVE            | Save to Flash          |\n"
  44               "+----------------+------------------------+"
  45             ;
  46          
  47          static void cmd_help (char *par) 
  48          {
  49   1        par=par;
  50   1        printf(help);
  51   1        return;
  52   1      }
C51 COMPILER V9.54   CMD                                                                   03/24/2017 11:31:15 PAGE 2   

  53          
  54          code CMD_TYPE cmd[] = {
  55          //  "RECV", cmd_recv,
  56          //  "XRAM", cmd_xram,
  57          //  "REG",  cmd_reg,
  58            //"FREQ", cmd_freq,
  59            //"COLC", cmd_colc,
  60            //"DIFF", cmd_diff,
  61            ////"RATE", cmd_rate,
  62            //"TXPW", cmd_txpower,
  63          //  "SEND", cmd_send,
  64            //"LED",  cmd_led,
  65            //"TRAC", cmd_trace,
  66            //"LOAD", cmd_load,
  67            //"SAVE", cmd_save,
  68            //"INFO", cmd_info,
  69            "HELP", cmd_help,
  70            //"?",    cmd_help
  71            //"TX", cmd_tx,
  72            };
  73            
  74          #define CMD_COUNT   (sizeof (cmd) / sizeof (cmd[0]))
  75          
  76          xdata uint8_t in_line[CMD_BUF_LEN_MAX] = { 0 };
  77          extern uint8_t xdata a7139_tx[RF_RECV_BUF_LEN_MAX];
  78          
  79          int getline(uint8_t * lp, uint8_t n)
  80          {
  81   1          uint8_t cnt = 0;
  82   1          uint8_t c;
  83   1          uint8_t pos = 0;
  84   1          uint8_t head1 = 0;
  85   1          int wait_overtime_flag = 0;
  86   1          if( avalible() > 0 )
  87   1          {
  88   2            do 
  89   2            {
  90   3                //clock_delay(CMD_GET_LINE_DELAY);
  91   3              c = uart_getchar();
  92   3                  switch(c) 
  93   3                  {
  94   4                       case CMD_FLAG_ZERO:
  95   4                       break;
  96   4                       case CMD_FLAG_CNTL_Q:   /* ignore Control S/Q             */
  97   4                       case CMD_FLAG_CNTL_S:
  98   4                       break;
  99   4                      
 100   4                       case CMD_FLAG_BACKSPACE:
 101   4                       case CMD_FLAG_DEL:
 102   4                          if (cnt == 0) {
 103   5                             break;
 104   5                          }
 105   4                          cnt--;                         /* decrement count                */
 106   4                          lp--;                          /* and line pointer               */
 107   4                          putchar (0x08);                /* echo backspace                 */
 108   4                          putchar (' ');
 109   4                          putchar (0x08);
 110   4                          break;
 111   4                       case CMD_FLAG_PKT_HEAD_1:
 112   4                          head1 = 1;
 113   4                          *lp = c;
 114   4                          a7139_tx[pos] = c;
C51 COMPILER V9.54   CMD                                                                   03/24/2017 11:31:15 PAGE 3   

 115   4                          pos++;
 116   4                          lp++;                          /* increment line pointer         */
 117   4                          cnt++;
 118   4                          break;
 119   4                       
 120   4                       case CMD_FLAG_ESC:
 121   4                          *lp = 0;                       /* ESC - stop editing line        */
 122   4                          return (FALSE);
 123   4                       case CMD_FLAG_CR:                          /* CR - done, stop editing line   */
 124   4                          *lp = c;
 125   4                          lp++;                          /* increment line pointer         */
 126   4                          cnt++;                         /* and count                      */
 127   4                          c = CMD_FLAG_LF;
 128   4                       default:
 129   4                        if(head1)
 130   4                        {
 131   5                          uint8_t i = 0;
 132   5                          uint8_t len = 0;
 133   5                          clock_time_t wait_flag = 0;
 134   5                          *lp = c;
 135   5                          a7139_tx[pos] = c;
 136   5                          len = c;
 137   5                          pos++;
 138   5                          lp++;                          /* increment line pointer         */
 139   5                          cnt++;
 140   5                          wait_flag = clock_time();
 141   5                          for(i = 0; i < len+1; )  // RF_RECV_BUF_LEN_MAX - 2
 142   5                          {
 143   6                            if(avalible() > 0){
 144   7                            *lp = uart_getchar();
 145   7                            a7139_tx[pos] = *lp;
 146   7                            pos++;
 147   7                            i++;
 148   7                            lp++;                          /* increment line pointer         */
 149   7                            cnt++;} 
 150   6                            if((wait_flag + CLOCK_CONF_SECOND) == clock_time())
 151   6                            {
 152   7                              wait_overtime_flag = 1;
 153   7                              break;
 154   7                            }
 155   6                          }
 156   5                          if(wait_overtime_flag)
 157   5                          {
 158   6                            pos = 0;
 159   6                            head1=0;
 160   6                            return (FALSE);
 161   6                          }
 162   5                          else
 163   5                          { 
 164   6                            if(a7139_tx[pos-1]==chkSumCalc(&a7139_tx[1],pos-2))
 165   6                            {
 166   7                              rf_tx_valid_flag=1;
 167   7                              return (TRUE);
 168   7                            }
 169   6                            else
 170   6                              return (FALSE);
 171   6                          }                 
 172   5                        }else{
 173   5                          *lp = c;  
 174   5                          lp++;                          /* increment line pointer         */
 175   5                          cnt++;}                         /* and count                      */
 176   4                          break;
C51 COMPILER V9.54   CMD                                                                   03/24/2017 11:31:15 PAGE 4   

 177   4                }       
 178   3           } while (cnt < n - 2  &&  c != CMD_FLAG_LF);     /* check limit and CR             */
 179   2         }
 180   1          
 181   1         *lp = 0;    
 182   1                                  /* mark end of string             */
 183   1         return (TRUE);
 184   1      }
 185          
 186          
 187          int strtoul(char *s)
 188          {
 189   1        int ret;
 190   1        int radix = 10;
 191   1        int negative = 0;
 192   1        int i;
 193   1        ret = 0;
 194   1        if(*s == '-') 
 195   1        {
 196   2          negative = 1;
 197   2          s++;
 198   2        }
 199   1        else if(*s == '0')
 200   1        {
 201   2          s++;
 202   2          if(*s == 'x')
 203   2          {
 204   3            s++;
 205   3            radix = 0x10;
 206   3          }
 207   2        }
 208   1        while (*s) {
 209   2          if (*s >= '0' && *s <= '9')
 210   2            i = *s - '0';
 211   2          else if (*s >= 'a' && *s <= 'f')
 212   2            i = *s - 'a' + 0xa;
 213   2          else if (*s >= 'A' && *s <= 'F')
 214   2            i = *s - 'A' + 0xa;
 215   2          else
 216   2            break;
 217   2          if(i >= radix) break;
 218   2          ret = (ret * radix) + i;
 219   2          s++;
 220   2        }
 221   1        return negative?(-ret):ret;
 222   1      }
 223          
 224          char *getentry(char *cp, char **ppNext)
 225          {
 226   1        char *sp, lfn = 0, sep_ch = ' ';
 227   1         if (cp == NULL) {                          /* skip NULL pointers          */
 228   2            *ppNext = cp;
 229   2            return (cp);
 230   2         }
 231   1         for ( ; *cp == ' ' || *cp == '\"'; cp++) { /* skip blanks and starting  " */
 232   2            if (*cp == '\"') { sep_ch = '\"'; lfn = 1; }
 233   2            *cp = 0;
 234   2         }
 235   1         for (sp = cp; *sp != CMD_FLAG_CR && *sp != CMD_FLAG_LF; sp++) {
 236   2            if ( lfn && *sp == '\"') break;
 237   2            if (!lfn && *sp == ' ' ) break;
 238   2         }
C51 COMPILER V9.54   CMD                                                                   03/24/2017 11:31:15 PAGE 5   

 239   1         for ( ; *sp == sep_ch || *sp == CMD_FLAG_CR || *sp == CMD_FLAG_LF; sp++) {
 240   2            *sp = 0;
 241   2            if ( lfn && *sp == sep_ch) { sp ++; break; }
 242   2         }
 243   1         *ppNext = (*sp) ? sp : NULL;                /* next entry                  */
 244   1         return (cp);
 245   1      }
 246          
 247          int cmd_master(void)
 248          {
 249   1         int ret = TRUE;
 250   1         char *sp=NULL,*cp=NULL,*next=NULL;
 251   1         int8_t i;
 252   1         unsigned char u = 0;
 253   1         //printf (intro);                            /* display example info        */
 254   1         //printf (help);
 255   1         //printf (PROMPT);                     /* display prompt              */
 256   1            /* get command line input      */
 257   1          ret = getline (in_line, CMD_BUF_LEN_MAX);
 258   1          if( FALSE == ret ) 
 259   1          {
 260   2            printf("get line failed\n");
 261   2          }
 262   1          else
 263   1          {
 264   2            sp = getentry (&in_line[0], &next);
 265   2            if (*sp != 0) 
 266   2            {
 267   3               for (cp = sp; *cp && (*cp != ' '); cp++) {
 268   4               *cp = toupper (*cp);                 /* command to upper-case       */
 269   4              }
 270   3               
 271   3              for (i = 0; i < CMD_COUNT; i++) 
 272   3              {
 273   4                 if (0 == strcmp (sp, (const char *)&cmd[i].name)) 
 274   4                 {
 275   5                    cmd[i].func (next);                  /* execute command function    */
 276   5                    break;
 277   5                 }
 278   4                 
 279   4              }
 280   3              
 281   3              if (i == CMD_COUNT) {
 282   4                ret = FALSE;
 283   4                if(!rf_tx_valid_flag)
 284   4                printf ("\ncmd error\n");
 285   4              }
 286   3            }
 287   2          }
 288   1          
 289   1          return ret;
 290   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1521    ----
   CONSTANT SIZE    =    536    ----
   XDATA SIZE       =     33      41
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.54   CMD                                                                   03/24/2017 11:31:15 PAGE 6   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
